# 数据预处理

## 总览

<img src="https://raw.githubusercontent.com/wiki/Sandiagal/IDIPLAB_CV/流程图.png" width="80%" >



从各处收集到的图像往往需要进行处理才能送入模型进行训练，而`数据预处理`模块将解决相关问题。该模块将完成从读取图像到送入模型的主要功能。

上图给出了一种常见的数据预处理流程，包括数据增强和数据集分割两大块。

* __数据增强__：利用各种变换使扩充图像的多样性。

  模型越复杂，所需的数据就越多。数据约少就越容易产生过拟合。在某些数据难以收集的问题上，可以采用__数据增强__的方法增广数据。__数据增强__完全免费，其目的使增强图像的多样性，从而提高模型的泛化能力。但__数据增强__并不能带来新的图像内容的，所以提升效果有限。

  该部分提供了目前常用的数据增强算法，包括翻转、噪声、裁剪、仿射变换等。也提供了数据增强库[imgaug](https://github.com/aleju/imgaug)的接口，并且支持用户自定义数据增强算法。

* __数据集分割__：让数据各司其职。

  收集到的数据并非全部都用于训练。一般简单的处理是将数据集分割为__训练集__、__测试集__。其中，__训练集__用于建立模型，__测试集__用于评估选定模型的泛化情况。而另一个更严谨的方法是将数据集分割为__训练集__、__验证集__、__测试集__。其中，__验证集__用于交叉检验和参数。

  用户可以随意调整数据集分割的比例。并且对于增强数据的归属问题，该部分也保证__训练集__中不会出现__验证集__和__测试集__对应的增强数据。


## 目录结构

> 为了保证代码的正常运行，请保证`dataset`文件夹中的图像按照如下格式存放。

`dataset`下的一级目录代表数据的来源，如origin是原始数据、augment是增强数据。二级目录代表了数据的类别信息，如dogs、cats。二级目录下的图像文件代表对应类别的样本，如dog001是dogs类的样本、cat001是cats类的样本。代码将直接从样本对应的路径读取从属类别以及类别名称。为了保证内存中的样本可以和文件中的样本一一对应，最好确保每个样本拥有不同名称。

```powershell
dataset/
	origin/
        dogs/
            dog001.jpg
            dog002.jpg
            ...
        cats/
            cat001.jpg
            cat002.jpg
            ...
		...
	augment/
		dogs/
			dog001_XXXXX.jpg
			...
		...
	...
```

## 应用范例

数据增强请参照专栏。

此处将按照`总览`中的**组合1**和**组合2**进行举例说明。

为了统一代码的相对路径，我们将按照下图进行目录的排布。相关编码将在**工程主函数**中进行。

```powershell
工程名/
	datasets/
		数据集
		...
	idiplab_cv/
		库函数
		...
	主函数
	...
```

### 组合1

简单问题下，将原始数据的分割为__训练集__和__测试集__。

1. 导入库函数。

   ```python
   from idiplab_cv.dataset_io import Dataset
   ```

2. 读取所有数据，得到各类对应代号和拥有的样本数。

   ```python
   dataset = io.Dataset(path="dataset")
   class_to_index, sample_per_class = dataset.load_data()
   ```

3. 进行__训练集__和__测试集__的分割。测试集大概拥有原始数据的20%。

   ```python
   imgs_train, labels_train, imgs_test, labels_test = dataset.train_test_split(test_shape=0.2)
   ```
4. 将标签转换为one-hot矩阵，并且进行shuffle。

   ```python
   imgs_train, labels_train, imgs_test, labels_test = dataset.train_test_split(test_shape=0.2)
   ```

### 组合2

包含数据增强，并且严谨的进行3折交叉检验。

**组合2**：按照3：1：1的比例分割出训练集、验证集和测试集，并进行数据增强。

1. 运用`augmentation`增广原始数据。
2. 对应**组合1**中训练集(80%)，按照3：1的比例分割出子训练集(60%)和验证集(20%)。
3. 读取子训练集(60%)对应的增强数据，组成新的训练集(660%)。



1. 导入库函数。

   ```python
   from idiplab_cv.augmentation import augmentation
   from idiplab_cv.dataset_io import Dataset
   ```

2. 进行数据增强。相关变换包括

   ```python
   datagen_args = dict(
       rotation_range=15.,
       width_shift_range=0.05,
       height_shift_range=0.05,
       shear_range=10.,
       zoom_range=0.1,
       channel_shift_range=5.,
       horizontal_flip=True)

   agmtgen = agmt.AugmentGenerator(path="dataset")
   agmtgen.normol_augment(datagen_args=datagen_args,augment_amount=30)
   ```

3. 读取原始数据和增强的数据。

   ```python
   icld_agmt = True

   imgs_orig, _, labels_orig, imgs_agmt, _, labels_agmt = load_all_data(
       path_orig, 
       icld_agmt)
   ```

4. 将数据按照分为5组，取1组作为测试集(20%)进行训练，其余作为原训练集(80%)。读取原训练集(80%)对应的增强数据作为训练集(880%)。

   ```python
   now_splits = 0
   n_splits = 5

   imgs_train, imgs_test, labels_train, labels_test = train_test_split(
       imgs_orig,
       labels_orig,
       imgs_agmt,
       labels_agmt,
       all_splits,
       now_splits,
       icld_agmt)
   ```

5. 将测试集(20%)，平分为验证集(10%)和子测试集(10%)。

   ```python
   imgs_vld, imgs_test, labels_vld, labels_test = test_valid_split(
       imgs_test, labels_test, test_size=0.5)
   ```