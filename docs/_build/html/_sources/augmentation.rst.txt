
数据增强
====================

idiplab_cv.augment
--------------------

模型越复杂，所需的数据就越多。数据约少就越容易产生过拟合。在某些数据难以收集的问题上，可以采用 ``数据增强`` 的方法增广数据。``数据增强`` 通过对有限的数据进行各种变换，从而产生更多的等价数据。比起人为收集更多数据，``数据增强`` 完全免费，并且可以增强图像的多样性，从而提高模型的泛化能力。但 ``数据增强`` 并不能带来新的图像内容的，所以提升效果有限。

.. figure:: ../images/preprocessing/heavy.jpg
    :alt: Heavy augmentations

    单张图像的数据增强范例

引用 imgaug- 中的数据增强范例。我们对一只 **仓鼠** 图像进行了仿射变换、颜色抖动、超像素解析、锐化平滑等变换后，产生了32张“新”图像。如第1行1列张图像，原先白色的仓鼠经过了数据增强，产生了粉红色的仓鼠。这将使网络获得 **颜色不变性**，即将不同颜色的仓鼠都识别为 **仓鼠**。类似的还有 **位置不变性**、**形状不变性** 等。此外如第1行3列张图像，仓鼠的头部被遮挡。这将 ``Dropout`` 的思想引入了 ``数据增强``，即通过对部分显著特征的限制，强迫网络学习更加一般化的特征。

.. _imgaug: https://github.com/aleju/imgaug

上述图像对于网络来说都是不同的输入，这样就通过各种变换增强了图像的多样性。但通过 ``数据增强`` 产生的数据并非能和真实的数据相提并论。比如第3行1列张图像，仓鼠图像被颠倒了，而在现实中几乎不会出现这样的仓鼠。所以网络从这样图像中学习到了什么，也难以利用到一般的仓鼠中。此外，毕竟 ``数据增强`` 是基于原始图像的再创作，并不能带来新的图像内容的。所以如果增广倍数太多，也会因为图相似度太高而使提升效果下降。。

``数据增强`` 可以大致分为2种：非监督数据增强、监督数据增强。




该模块将完成通用的数据增强方法。
在训练前对样本集进行数据增强。函数保证每张图片的增广倍数都相同，并且会根据path目录中的所有子目录，创建带有_agmt后缀的目录。增强的数据将会保存在对应的_agmt目录内。需要目录的具体格式可以参见[数据预处理](数据预处理)。






.. py:class:: idiplab_cv.augment.AugmentGenerator(path, shape=None)

    sdsdsdsdsdsd
	
    :param str path: 数据所在文件夹地址，目录结尾一定要加“/”。每个类应该包含一个子目录。任何在子目录下的 jpg图像，都将被包含在生成器中。
    :param turple shape: `(height, width, channels)`，默认:`(224, 224 3)`。所有的图像将被调整到的尺寸。
	
	

	
    **实例化说明：**

    1. 当实例化 WechatBasic 时，你可以传递上述参数说明中任意多个参数进去，但是传递参数不足将会在使用部分功能时引发对应的异常。
	
     **虽然认证订阅号、未认证服务号拥有 appid 及 appsecret，但不代表其能调用高级接口** ，这两种类型的账号仅能进行自定义菜单及JS相关操作，进行其他权限外操作仍然会抛出异常 ``OfficialAPIError``

    2. **详细说明一下 access_token, access_token_expires_at, jsapi_ticket, jsapi_ticket_expires_at 参数的传入问题：**

     因为此开发包并不打算以服务器的方式常驻，所以，每次请求均会重新实例化 ``WechatBasic`` ，而微信的 ``access_token`` 和 ``jsapi_ticket`` 的有效期为 7200 秒，不可能每次实例化的时候去重新获取，所以需要你以你自己的方式去保存上一次请求中实例化后的 ``WechatBasic`` 中 ``access_token``, ``access_token_expires_at``, ``jsapi_ticket``, ``jsapi_ticket_expires_at`` 参数，并在下一次的实例化的过程中传入，以此来保证 ``access_token`` 及 ``jsapi_ticket`` 的持久性。
	 
    .. py:method:: check_signature(signature, timestamp, nonce)

        验证微信消息真实性

        运行时检查：``token``

        可用公众号类型：认证/未认证订阅号, 认证/未认证服务号

        :param str signature: 微信加密签名
        :param str timestamp: 时间戳
        :param str nonce: 随机数
        :return: 通过验证返回 ``True``, 未通过验证返回 ``False``	 
	 
	 
	 
	 
	 
	 